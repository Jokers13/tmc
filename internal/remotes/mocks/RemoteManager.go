// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	remotes "github.com/web-of-things-open-source/tm-catalog-cli/internal/remotes"
)

// RemoteManager is an autogenerated mock type for the RemoteManager type
type RemoteManager struct {
	mock.Mock
}

// Add provides a mock function with given fields: name, typ, confStr, confFile
func (_m *RemoteManager) Add(name string, typ string, confStr string, confFile []byte) error {
	ret := _m.Called(name, typ, confStr, confFile)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []byte) error); ok {
		r0 = rf(name, typ, confStr, confFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// All provides a mock function with given fields:
func (_m *RemoteManager) All() ([]remotes.Remote, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []remotes.Remote
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]remotes.Remote, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []remotes.Remote); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]remotes.Remote)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: name
func (_m *RemoteManager) Get(name string) (remotes.Remote, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 remotes.Remote
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (remotes.Remote, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) remotes.Remote); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(remotes.Remote)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadConfig provides a mock function with given fields:
func (_m *RemoteManager) ReadConfig() (remotes.Config, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadConfig")
	}

	var r0 remotes.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (remotes.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() remotes.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(remotes.Config)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: name
func (_m *RemoteManager) Remove(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rename provides a mock function with given fields: oldName, newName
func (_m *RemoteManager) Rename(oldName string, newName string) error {
	ret := _m.Called(oldName, newName)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldName, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetConfig provides a mock function with given fields: name, typ, confStr, confFile
func (_m *RemoteManager) SetConfig(name string, typ string, confStr string, confFile []byte) error {
	ret := _m.Called(name, typ, confStr, confFile)

	if len(ret) == 0 {
		panic("no return value specified for SetConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []byte) error); ok {
		r0 = rf(name, typ, confStr, confFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDefault provides a mock function with given fields: name
func (_m *RemoteManager) SetDefault(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for SetDefault")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ToggleEnabled provides a mock function with given fields: name
func (_m *RemoteManager) ToggleEnabled(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ToggleEnabled")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRemoteManager creates a new instance of RemoteManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRemoteManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *RemoteManager {
	mock := &RemoteManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
