// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/web-of-things-open-source/tm-catalog-cli/internal/model"
)

// Remote is an autogenerated mock type for the Remote type
type Remote struct {
	mock.Mock
}

// CreateToC provides a mock function with given fields:
func (_m *Remote) CreateToC() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateToC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: id
func (_m *Remote) Fetch(id model.TMID) ([]byte, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(model.TMID) ([]byte, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(model.TMID) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(model.TMID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: filter
func (_m *Remote) List(filter string) (model.TOC, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 model.TOC
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.TOC, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(string) model.TOC); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(model.TOC)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Remote) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Push provides a mock function with given fields: id, raw
func (_m *Remote) Push(id model.TMID, raw []byte) error {
	ret := _m.Called(id, raw)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.TMID, []byte) error); ok {
		r0 = rf(id, raw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Versions provides a mock function with given fields: name
func (_m *Remote) Versions(name string) (model.TOCEntry, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Versions")
	}

	var r0 model.TOCEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.TOCEntry, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) model.TOCEntry); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(model.TOCEntry)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRemote creates a new instance of Remote. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRemote(t interface {
	mock.TestingT
	Cleanup(func())
}) *Remote {
	mock := &Remote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
