// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/web-of-things-open-source/tm-catalog-cli/internal/model"
)

// Remote is an autogenerated mock type for the Remote type
type Remote struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Remote) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: id
func (_m *Remote) Fetch(id string) (string, []byte, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 string
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, []byte, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) []byte); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// List provides a mock function with given fields: search
func (_m *Remote) List(search *model.SearchParams) (model.SearchResult, error) {
	ret := _m.Called(search)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 model.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.SearchParams) (model.SearchResult, error)); ok {
		return rf(search)
	}
	if rf, ok := ret.Get(0).(func(*model.SearchParams) model.SearchResult); ok {
		r0 = rf(search)
	} else {
		r0 = ret.Get(0).(model.SearchResult)
	}

	if rf, ok := ret.Get(1).(func(*model.SearchParams) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCompletions provides a mock function with given fields: kind, toComplete
func (_m *Remote) ListCompletions(kind string, toComplete string) ([]string, error) {
	ret := _m.Called(kind, toComplete)

	if len(ret) == 0 {
		panic("no return value specified for ListCompletions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(kind, toComplete)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(kind, toComplete)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(kind, toComplete)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Push provides a mock function with given fields: id, raw
func (_m *Remote) Push(id model.TMID, raw []byte) error {
	ret := _m.Called(id, raw)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.TMID, []byte) error); ok {
		r0 = rf(id, raw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Spec provides a mock function with given fields:
func (_m *Remote) Spec() model.RepoSpec {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Spec")
	}

	var r0 model.RepoSpec
	if rf, ok := ret.Get(0).(func() model.RepoSpec); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.RepoSpec)
	}

	return r0
}

// UpdateToc provides a mock function with given fields: updatedIds
func (_m *Remote) UpdateToc(updatedIds ...string) error {
	_va := make([]interface{}, len(updatedIds))
	for _i := range updatedIds {
		_va[_i] = updatedIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateToc")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(updatedIds...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Versions provides a mock function with given fields: name
func (_m *Remote) Versions(name string) ([]model.FoundVersion, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Versions")
	}

	var r0 []model.FoundVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.FoundVersion, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []model.FoundVersion); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FoundVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRemote creates a new instance of Remote. It also registers a testing interface on the mock and a cleanup function to assert the remotesmocks expectations.
// The first argument is typically a *testing.T value.
func NewRemote(t interface {
	mock.TestingT
	Cleanup(func())
}) *Remote {
	mock := &Remote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
