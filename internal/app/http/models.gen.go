// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package http

import (
	"time"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Defines values for LinkRel.
const (
	Content LinkRel = "content"
	Self    LinkRel = "self"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Detail   *string `json:"detail,omitempty"`
	Instance *string `json:"instance,omitempty"`
	Status   int     `json:"status"`
	Title    string  `json:"title"`
	Type     *string `json:"type,omitempty"`
}

// Inventory defines model for Inventory.
type Inventory struct {
	Contents map[string]InventoryEntry `json:"contents"`
	Meta     struct {
		Created time.Time `json:"created"`
	} `json:"meta"`
}

// InventoryEntry defines model for InventoryEntry.
type InventoryEntry struct {
	Links              *[]Link                 `json:"links,omitempty"`
	SchemaAuthor       SchemaAuthor            `json:"schema:author"`
	SchemaManufacturer SchemaManufacturer      `json:"schema:manufacturer"`
	SchemaMpn          string                  `json:"schema:mpn"`
	Versions           []InventoryEntryVersion `json:"versions"`
}

// InventoryEntryResponse defines model for InventoryEntryResponse.
type InventoryEntryResponse struct {
	Data InventoryEntry `json:"data"`
}

// InventoryEntryVersion defines model for InventoryEntryVersion.
type InventoryEntryVersion struct {
	Description string       `json:"description"`
	Links       *[]Link      `json:"links,omitempty"`
	Original    string       `json:"original"`
	Timestamp   *string      `json:"timestamp,omitempty"`
	TmId        string       `json:"tmId"`
	Version     ModelVersion `json:"version"`
}

// InventoryEntryVersionsResponse defines model for InventoryEntryVersionsResponse.
type InventoryEntryVersionsResponse struct {
	Data []InventoryEntryVersion `json:"data"`
}

// InventoryResponse defines model for InventoryResponse.
type InventoryResponse struct {
	Data Inventory `json:"data"`
}

// Link defines model for Link.
type Link struct {
	Href string  `json:"href"`
	Rel  LinkRel `json:"rel"`
}

// LinkRel defines model for Link.Rel.
type LinkRel string

// ModelVersion defines model for ModelVersion.
type ModelVersion struct {
	Model string `json:"model"`
}

// SchemaAuthor defines model for SchemaAuthor.
type SchemaAuthor struct {
	Name string `json:"name"`
}

// SchemaManufacturer defines model for SchemaManufacturer.
type SchemaManufacturer struct {
	Name string `json:"name"`
}

// GetInventoryParams defines parameters for GetInventory.
type GetInventoryParams struct {
	// FilterAuthor Filters the catalog by an author.
	FilterAuthor *string `form:"filter[author],omitempty" json:"filter[author],omitempty"`

	// FilterManufacturer Filters the catalog by a manufacturer.
	FilterManufacturer *string `form:"filter[manufacturer],omitempty" json:"filter[manufacturer],omitempty"`

	// FilterMpn Filters the catalog by a mpn (manufacturer part number).
	FilterMpn *string `form:"filter[mpn],omitempty" json:"filter[mpn],omitempty"`

	// FilterOriginal Filters the catalog by an original ID of a Thing Model.
	FilterOriginal *string `form:"filter[original],omitempty" json:"filter[original],omitempty"`

	// SearchContent Filters the catalog by its content with the help of an awesome query language
	SearchContent *string `form:"search[content],omitempty" json:"search[content],omitempty"`
}
